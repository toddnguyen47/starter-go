import (
	"context"
	"errors"
	"strings"
	"testing"

	"github.com/stretchr/testify/mock"
)

// ------------------------------------------------------------
// #region errReadCloser

// errReadCloser - Ref: https://stackoverflow.com/a/45126402/6323360
type errReadCloser int

func (m errReadCloser) Read(_ []byte) (n int, err error) {
	return 0, errors.New("some error")
}

func (m errReadCloser) Close() error {
	return nil
}

// #endregion
// o----------------------------------------------------------o


// ------------------------------------------------------------
// #region mockClientStruct

// mockClientStruct - mocking HTTP Client
type mockClientStruct struct {
	numDoCount    uint32
	numDoErrCount uint32
	savedRequest  *http.Request
	expectedResp  *http.Response
	t             *testing.T
	mutex         sync.Mutex
}

func (m *mockClientStruct) Do(req *http.Request) (*http.Response, error) {
	atomic.AddUint32(&m.numDoCount, 1)
	m.mutex.Lock()
	m.savedRequest = req
	m.mutex.Unlock()
	if atomic.LoadUint32(&m.numDoErrCount) > 0 {
		atomic.AddUint32(&m.numDoErrCount, ^uint32(0))
		resp := http.Response{
			StatusCode: http.StatusInternalServerError,
			Body:       io.NopCloser(bytes.NewReader([]byte("{}"))),
		}
		return &resp, errors.New("some error")
	}

	// Read body
	if req.Body != nil {
		b1, err := io.ReadAll(req.Body)
		assert.Nil(m.t, err)
		var output interface{}
		err = json.Unmarshal(b1, &output)
		assert.Nil(m.t, err)
		err = req.Body.Close()
		assert.Nil(m.t, err)
	}

	var resp *http.Response
	if m.expectedResp == nil {
		resp = &http.Response{
			StatusCode: 200,
			Body:       getHttpBody("{}"),
		}
	} else {
		resp = m.expectedResp
	}

	return resp, nil
}

func getHttpBody(str string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(str)))
}

// # endregion
// o----------------------------------------------------------o

// #region ResponseWriter mocks

type responseWriterMock struct {
	http.ResponseWriter

	// "F" for fail, "P" for pass
	passFailCodeWrite string
	numWrites         uint32
	bytesWritten      []byte
}

func (m *responseWriterMock) Write(input []byte) (int, error) {

	atomic.AddUint32(&m.numWrites, 1)
	if len(m.passFailCodeWrite) > 0 {
		firstChar := m.passFailCodeWrite[0]
		m.passFailCodeWrite = m.passFailCodeWrite[1:]
		if firstChar == 'F' {
			return 0, errForTests
		}
	}

	m.bytesWritten = input
	return 16, nil
}

func (m *responseWriterMock) Header() http.Header {
	return http.Header{}
}

func (m *responseWriterMock) WriteHeader(_ int) {
}

// #endregion ResponseWriter mocks

// ------------------------------------------------------------
// #region removeFirstExpectedCalls

type mockGetExpectedCalls interface {
	GetExpectedCalls() []*mock.Call
	SetExpectedCalls(expectedCalls []*mock.Call)
}

func removeFirstExpectedCalls(_ *testing.T, mock mockGetExpectedCalls, funcName string) {
	idx := -1
	expectedCalls := mock.GetExpectedCalls()
	for i := range expectedCalls {
		call := expectedCalls[i]
		if strings.EqualFold(funcName, call.Method) {
			idx = i
			break
		}
	}

	if idx != -1 {
		expectedCalls = append(expectedCalls[:idx], expectedCalls[idx+1:]...)
	}
	mock.SetExpectedCalls(expectedCalls)
}

type mockStruct struct {
	mock.Mock
}

func (m *mockStruct) GetExpectedCalls() []*mock.Call {
	return m.ExpectedCalls
}

func (m *mockStruct) SetExpectedCalls(expectedCalls []*mock.Call) {
	m.ExpectedCalls = expectedCalls
}

// #endregion removeFirstExpectedCalls
// o----------------------------------------------------------o
